
Updated for version 1.0.7 of the OPeNDAP FITS data handler software

Installing the OPeNDAP FITS data handler software

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
REQUIREMENTS
NOTES

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

0) Please skim REQUIREMENTS and NOTES sections of this file before reporting
   problems. Thanks.

1) Type `./configure' at the system prompt. On some systems you may have to
   type `sh configure.' If you want this part of the server to install
   someplace other than /usr/local/bin, use --prefix to change the prefix
   from the default "/use/local/." Make sure that the dap-server CGI knows
   where the handler is located (you can list the complete pathname in the
   dap-server.rc file; see dap-server's INSTALL and README files).

2) Type `make' to build the three server programs

3) Install the server components in $prefix by running `make install.'

Building from Our SVN Repository

  If you are building from a SVN checkout, run 'autoreconf --verbose' before
  './configure; make'. If you try to run autoconf, et c., by hand and wind up
  with build files that don't work, use 'autoreconf --force --verbose'. Once
  autoreconf has made the configure and Makefile.in files, do ./configure;
  make; make install as outlined above.

REQUIREMENTS

  o You need the libdap library version 3.11.0 and the BES software,
    version 3.9.0, to build and install this software. If you're using
    Linux, this means either building form source or using the libdap,
    libdap-devel, bes and bes-devel RPM packages.

  o You also need a recent copy of cfitsio. We've tested this server with
    cfitsio version 3.0, although any recent version should work fine. If the
    configure script cannot find your copy of libcfitsio, use the
    --with-cfits options to tell it where to look (see configure --help).

NOTES

  o DEBUGGING AIDS

    - The OPeNDAP libdap library includes the following debugging aids that
      may be of help to you in developing new applications.

    - DBG: simple program instrumentation -- see the file debug.h distributed
      with libdap (which is installed in the libdap header directory; use
      'config-libdap --cflags' and look at the value if -I).

    - DBG2: more elaborate program instrumentation -- by convention this is
      used for output that is half a page or more, while DEBUG is used for
      single line output.

    - To build with program instrumentation use `--enable-debug=<level>'
      where <level> is 1 or 2.

    - To use BES debugging aids simply pass the -d option to the BES starter
      script, like so: besctl start -d "bes.debug,fits". This will turn on
      any debugging in the BES code of fits and dump the debugging
      statements to the file bes.debug. If you just want it to your screen,
      replace bes.debug with cerr.

